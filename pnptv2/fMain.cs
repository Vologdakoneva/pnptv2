using System;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Management;
using System.Windows.Forms;
using DevExpress.XtraScheduler;
using DevExpress.XtraEditors;
using DevExpress.DataAccess.Sql;
using System.Data.OleDb;
using System.Configuration;

namespace pnptv
{



    public partial class fMain : Form
    {
        public ConnectionModule ConnectionModules;

        public fMain()
        {
            InitializeComponent();
            ConnectionModules = new pnptv.ConnectionModule();
            // This line of code is generated by Data Source Configuration Wizard
            HideNotWorks();
            CopyFrom = null;
        }


        public int GetActiveMonitors()
        {
            int Counter = 0;
            System.Management.ManagementObjectSearcher monitorObjectSearch = new System.Management.ManagementObjectSearcher("SELECT * FROM Win32_DesktopMonitor");
            //monitorObjectSearch.Get().Count;

            foreach (ManagementObject Monitor in monitorObjectSearch.Get())
            {
                UInt16 Status = 0;
                try
                {
                    Status = (UInt16)Monitor["Availability"];
                    //button1.Text = Monitor["Description"].ToString();
                }
                catch (Exception ex)
                {
                    //Error handling if you want to
                    continue;
                }
                if (Status == 3)
                    Counter++;
            }
            return Counter;
        }


        private void button1_Click(object sender, EventArgs e)
        {
            //Количество рабочих столов 
            //button1.Text = System.Windows.Forms.SystemInformation.MonitorCount.ToString();
            //webBrowser1.Navigate("http://tarnogasat.ru/");
        }



        private void fMain_Load(object sender, EventArgs e)
        {
            try
            {
                spinMinitors.EditValueChanged -= spinMinitors_EditValueChanged;
                RefreshTime.EditValueChanged -= RefreshTime_ValueChanged;
                wORKPLACESTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
                sETUPTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
                sETUPREFRESHTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
                this.mONITORSTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
                this.vIDJETTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
                this.adaptVidgetInMon.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
                this.dOCTORSTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
                wORKPLACESTableAdapter.Fill(qWorkPlace.WORKPLACES);
                this.dOCTORSTableAdapter.Fill(this.qDoctor.DOCTORS);
                // TODO: данная строка кода позволяет загрузить данные в таблицу "qWorkPlace.WORKPLACES". При необходимости она может быть перемещена или удалена.
                // TODO: данная строка кода позволяет загрузить данные в таблицу "qDoctor.SETUP". При необходимости она может быть перемещена или удалена.
                this.sETUPTableAdapter.Fill(this.qDoctor.SETUP, "CNTMONITOR");
                this.sETUPREFRESHTableAdapter.Fill(this.qDoctor.SETUPREFRESH, "REFRESH");
                // TODO: данная строка кода позволяет загрузить данные в таблицу "qDoctor.VIDJET". При необходимости она может быть перемещена или удалена.
                this.adaptVidgetInMon.Fill(this.qDoctor.qVidgetInMon, WorkedMonitors.SelectedIndex + 1);
                this.vIDJETTableAdapter.Fill(this.qDoctor.VIDJET);
                // TODO: данная строка кода позволяет загрузить данные в таблицу "qDoctor.MONITORS". При необходимости она может быть перемещена или удалена.
                this.mONITORSTableAdapter.Fill(this.qDoctor.MONITORS);
                this.sETUPREFRESHTableAdapter.Fill(this.qDoctor.SETUPREFRESH, "REFRESH");
                if (this.qDoctor.SETUPREFRESH.Rows.Count == 0)
                {
                    this.qDoctor.SETUPREFRESH.AddSETUPREFRESHRow(0, "REFRESH", 0);
                    this.sETUPREFRESHTableAdapter.Update(this.qDoctor.SETUPREFRESH);
                    this.sETUPREFRESHTableAdapter.Fill(this.qDoctor.SETUPREFRESH, "REFRESH");
                }
                timerRefresh.Enabled = false;
                if (Convert.ToInt32(this.qDoctor.SETUPREFRESH.Rows[0]["VALUEINT"]) != 0)
                {
                    timerRefresh.Interval = Convert.ToInt32(Convert.ToInt32(this.qDoctor.SETUPREFRESH.Rows[0]["VALUEINT"]) * 1000 * 60 * 60);
                    timerRefresh.Enabled = true;
                }
                if (this.qDoctor.SETUP.Rows.Count == 0)
                {
                    this.qDoctor.SETUP.AddSETUPRow(0, "CNTMONITOR", 2);
                    this.sETUPTableAdapter.Update(this.qDoctor.SETUP);
                    this.sETUPTableAdapter.Fill(this.qDoctor.SETUP, "CNTMONITOR");
                }
                //spinMinitors.EditValueChanged += spinMinitors_EditValueChanged;
                //RefreshTime.EditValueChanged += RefreshTime_ValueChanged;
                this.kABINETSPRTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
                this.kABINETSPRTableAdapter.Fill(this.dmSchedule.KABINETSPR, Convert.ToInt32(KabinetPlace.EditValue));
                SetupMonitorList();
                this.qPlaceAdress.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
                this.qPlaceAdress.Fill(this.dmSchedule.tPlaceAdress);
                this.dmSchedule.qSchedule.TableNewRow += QSchedule_TableNewRow;
                this.dmSchedule.tPlaceAdress.TableNewRow += TPlaceAdress_TableNewRow;
                
            }
            catch (Exception)
            {

                throw;
            }

            LabCnt.Text = Screen.AllScreens.Length.ToString();
            if (ConnectionModules.prm != null && ConnectionModules.prm.Contains("/SHOW"))
            {
                ShowInTv_Click(sender, e);
            }
            RefreshScheduleData();
        }

        private void TPlaceAdress_TableNewRow(object sender, DataTableNewRowEventArgs e)
        {
            e.Row["IDALL"] = -1;
        }

        private void QSchedule_TableNewRow(object sender, DataTableNewRowEventArgs e)
        {
            e.Row["IDALL"] = -1;
            e.Row["IDVRACH"] = 1;
            e.Row["IDWORKPLACE"] = Convert.ToInt32(WorkPlaceSchedule.EditValue);
        }

        private void RefreshScheduleData()
        {
            this.qResourceAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
            this.qResourceAdapter.Fill(this.dmSchedule.qResource, Convert.ToInt32(WorkPlaceSchedule.EditValue));
            this.qScheduleAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
            this.qScheduleAdapter.Fill(this.dmSchedule.qSchedule, Convert.ToInt32(WorkPlaceSchedule.EditValue)); //Convert.ToInt32(gridLookUpOrg.EditValue)
            schedulerData.RefreshData();
            AdjustResources();

        }

        private void QSchedule_ColumnChanged(object sender, DataColumnChangeEventArgs e)
        {
             if (e.Row["IDWORKPLACE"].ToString()=="" || Convert.ToInt32( e.Row["IDWORKPLACE"]) != Convert.ToInt32(WorkPlaceSchedule.EditValue))
                e.Row["IDWORKPLACE"] = WorkPlaceSchedule.EditValue;
            if (e.Row["IDALL"].ToString() == "" )
                e.Row["IDALL"] = -1;
        }

        private void qRaspBindingSource_AddingNew(object sender, AddingNewEventArgs e)
        {
            //qRaspBindingSource.Current.row(1) ["IDALL"]   //e. ["IDALL"] = 0;
        }

        private void gridView2_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            //((e.Row as DataRowView).Row as qDoctor.qRaspRow).IDWORKPLACE = Convert.ToInt32(gridLookUpOrg.EditValue);
            //qRaspTableAdapter.Update(this.qDoctor.qRasp);
            //this.qRaspTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
            //this.qRaspTableAdapter.Fill(this.qDoctor.qRasp, Convert.ToInt32(gridLookUpOrg.EditValue));
        }

        private void tabRasp_Enter(object sender, EventArgs e)
        {
        }

        private void tabRasp_TabIndexChanged(object sender, EventArgs e)
        {

        }

        private void tabControl_SelectedPageChanged(object sender, DevExpress.XtraBars.Navigation.SelectedPageChangedEventArgs e)
        {
            gridLookUpOrg.EditValue = ((wORKPLACESBindingSource.Current as DataRowView).Row as qWorkPlace.WORKPLACESRow).IDALL;
            this.qRaspTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
            this.qRaspTableAdapter.Fill(this.qDoctor.qRasp, ((wORKPLACESBindingSource.Current as DataRowView).Row as qWorkPlace.WORKPLACESRow).IDALL);
            WorkPlaceSchedule.EditValue = ((wORKPLACESBindingSource.Current as DataRowView).Row as qWorkPlace.WORKPLACESRow).IDALL;
            KabinetPlace.EditValue = ((wORKPLACESBindingSource.Current as DataRowView).Row as qWorkPlace.WORKPLACESRow).IDALL;
            schedulerControls.Start = DateTime.Now.Date;

        }

        private void gridLookUpOrg_EditValueChanged(object sender, EventArgs e)
        {
            this.qRaspTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
            this.qRaspTableAdapter.Fill(this.qDoctor.qRasp, Convert.ToInt32(gridLookUpOrg.EditValue));
            this.qScheduleAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
            this.qScheduleAdapter.Fill(this.dmSchedule.qSchedule, Convert.ToInt32(gridLookUpOrg.EditValue));
        }

        private void gvWorkPlace_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            this.qRaspTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
            this.wORKPLACESTableAdapter.Update(this.qWorkPlace.WORKPLACES);
            this.wORKPLACESTableAdapter.Fill(this.qWorkPlace.WORKPLACES);
        }

        private void gridView1_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            this.qRaspTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
            this.dOCTORSTableAdapter.Update(this.qDoctor.DOCTORS);
            this.dOCTORSTableAdapter.Fill(this.qDoctor.DOCTORS);
        }


        private void spinMinitors_Modified(object sender, EventArgs e)
        {
        }
        private void SetupMonitorList()
        {
            this.mONITORSTableAdapter.Fill(this.qDoctor.MONITORS);
            WorkedMonitors.Properties.Items.Clear();
            int i;
            if (this.qDoctor.SETUP.Rows.Count > 0)
            {
                for (i = 1; i <= Convert.ToInt32(this.qDoctor.SETUP.Rows[0]["VALUEINT"]); i++)
                {
                    for (int j = 1; j <= i; j++)
                    {
                        object[] findVals = new object[2];
                        findVals[0] = i;
                        findVals[1] = i;
                        if (this.qDoctor.MONITORS.Select("idmonitor = " + j.ToString() + " and cntmon=" + i.ToString()).Length == 0)
                        {
                            this.qDoctor.MONITORS.AddMONITORSRow(0, "Монитор " + j.ToString() + " для количества мониторов " + i.ToString(), Guid.NewGuid().ToString(), i, j, "");
                            this.mONITORSTableAdapter.Update(this.qDoctor.MONITORS);
                            this.mONITORSTableAdapter.Fill(this.qDoctor.MONITORS);
                        }
                    }
                    WorkedMonitors.Properties.Items.Add(i.ToString() + " работающих мониторов", i, -1);
                }
                WorkedMonitors.SelectedIndex = 0;
            }
        }

        private void gridViewMon_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            if (Convert.ToInt32((qVidgetInMonBindingSource.Current as DataRowView)["IDMON"]) > WorkedMonitors.SelectedIndex + 1)
            {
                MessageBox.Show("Нельзя сохранить настройку. Номер монитора должен быть не более чем выбрано в настройке.");
                this.adaptVidgetInMon.Fill(this.qDoctor.qVidgetInMon, WorkedMonitors.SelectedIndex + 1);
            }
            {
                (qVidgetInMonBindingSource.Current as DataRowView)["CNTMON"] = WorkedMonitors.SelectedIndex + 1;
                this.adaptVidgetInMon.Update(this.qDoctor.qVidgetInMon);
                this.adaptVidgetInMon.Fill(this.qDoctor.qVidgetInMon, WorkedMonitors.SelectedIndex + 1);
            }
        }

        private void WorkedMonitors_SelectedIndexChanged(object sender, EventArgs e)
        {
            this.adaptVidgetInMon.Fill(this.qDoctor.qVidgetInMon, WorkedMonitors.SelectedIndex + 1);
        }

        private void ShowInTv_Click(object sender, EventArgs e)
        {
            // Показать все
            this.sETUPTableAdapter.Fill(this.qDoctor.SETUP, "CNTMONITOR");
            ClearAllShow_Click(sender, e); // Убрать все окна
            int CntMonitor = 0;
            //MessageBox.Show("мониторов задано" + Convert.ToInt32(this.qDoctor.SETUP.Rows[0]["VALUEINT"]).ToString());
            if (Screen.AllScreens.Length > Convert.ToInt32(this.qDoctor.SETUP.Rows[0]["VALUEINT"]))
            {
                CntMonitor = Convert.ToInt32(this.qDoctor.SETUP.Rows[0]["VALUEINT"]);
            }
            else
            {
                CntMonitor = Screen.AllScreens.Length;
             }
            //MessageBox.Show("Для числа мониторов " + CntMonitor.ToString());
            int i;
            for (i = 1; i <= CntMonitor; i++)
            {
                this.adaptVidgetInMon.Fill(this.qDoctor.qVidgetInMon, i);
                fShowInMonior showmon = new fShowInMonior();
                showmon.FormBorderStyle = FormBorderStyle.None;
                showmon.Left = Screen.AllScreens[i - 1].WorkingArea.Left;
                showmon.Top = Screen.AllScreens[i - 1].WorkingArea.Top;
                showmon.Width = Screen.AllScreens[i - 1].WorkingArea.Width;
                showmon.Height = Screen.AllScreens[i - 1].WorkingArea.Height;
                this.sETUPTableAdapter.Fill(this.qDoctor.SETUP, "URLSHOW");
                string NavigateUrl = this.qDoctor.SETUP.Rows[0]["VALUESTRING"].ToString() + "?IDMONITOR=" +
                                     i.ToString() + "&CNTMON=" +
                                     CntMonitor.ToString() +
                                     "&isEdit" + "=0" +
                                     (qVidgetInMonBindingSource.Current as DataRowView)["PARAMS"].ToString();
                //MessageBox.Show("URL " + NavigateUrl);
                this.sETUPTableAdapter.Fill(this.qDoctor.SETUP, "CNTMONITOR");
                showmon.webBrowsers.Navigate(NavigateUrl);
                showmon.FormBorderStyle = FormBorderStyle.None;
                showmon.WindowState = FormWindowState.Maximized;
                showmon.Show();
                System.Threading.Thread.Sleep(5000);
            }

        }

        private void mnAdd_Opening(object sender, CancelEventArgs e)
        {

        }

        private void toolStripMenuItem1_Click(object sender, EventArgs e)
        {

        }

        private void SetupPage_Click(object sender, EventArgs e)
        {
            int idmonitor = 1;
            fShowInMonior showmon = new fShowInMonior();
            if (Screen.AllScreens.Length < Convert.ToInt32((qVidgetInMonBindingSource.Current as DataRowView)["IDMON"]))
            {
                idmonitor = 1;
                MessageBox.Show("Число мониторов менее, чем требуется. Показ будет на первом мониторе");
            }
            else
            {
                idmonitor = Convert.ToInt32((qVidgetInMonBindingSource.Current as DataRowView)["IDMON"]);
            }
            showmon.FormBorderStyle = FormBorderStyle.Sizable;
            showmon.Left = Screen.AllScreens[idmonitor - 1].WorkingArea.Left;
            showmon.Top = Screen.AllScreens[idmonitor - 1].WorkingArea.Top;
            showmon.Width = Screen.AllScreens[idmonitor - 1].WorkingArea.Width;
            showmon.Height = Screen.AllScreens[idmonitor - 1].WorkingArea.Height;
            this.sETUPTableAdapter.Fill(this.qDoctor.SETUP, "URLSHOW");
            string NavigateUrl = this.qDoctor.SETUP.Rows[0]["VALUESTRING"].ToString() + "?IDMONITOR=" +
                                 (qVidgetInMonBindingSource.Current as DataRowView)["IDMON"].ToString() + "&CNTMON=" +
                                 (qVidgetInMonBindingSource.Current as DataRowView)["CNTMON"].ToString() +
                                 "&isEdit" + "=1" +
                                 (qVidgetInMonBindingSource.Current as DataRowView)["PARAMS"].ToString();
            this.sETUPTableAdapter.Fill(this.qDoctor.SETUP, "CNTMONITOR");
            showmon.webBrowsers.Navigate(NavigateUrl);
            showmon.FormBorderStyle = FormBorderStyle.None;
            showmon.WindowState = FormWindowState.Maximized;
            showmon.Show();
        }

        private void ViewPage_Click(object sender, EventArgs e)
        {
            int idmonitor = 1;
            fShowInMonior showmon = new fShowInMonior();
            showmon.FormBorderStyle = FormBorderStyle.None;
            if (Screen.AllScreens.Length < Convert.ToInt32((qVidgetInMonBindingSource.Current as DataRowView)["IDMON"]))
            {
                idmonitor = 1; 
                MessageBox.Show("Число мониторов менее, чем требуется. Показ будет на первом мониторе");
            }
            else
            {
                idmonitor = Convert.ToInt32((qVidgetInMonBindingSource.Current as DataRowView)["IDMON"]);
            }
            showmon.Left = Screen.AllScreens[idmonitor - 1].WorkingArea.Left;
            showmon.Top = Screen.AllScreens[idmonitor - 1].WorkingArea.Top;
            showmon.Width = Screen.AllScreens[idmonitor - 1].WorkingArea.Width;
            showmon.Height = Screen.AllScreens[idmonitor - 1].WorkingArea.Height;
            this.sETUPTableAdapter.Fill(this.qDoctor.SETUP, "URLSHOW");
            string NavigateUrl = this.qDoctor.SETUP.Rows[0]["VALUESTRING"].ToString() + "?IDMONITOR=" +

                                 (qVidgetInMonBindingSource.Current as DataRowView)["IDMON"].ToString() + "&CNTMON=" +
                                 (qVidgetInMonBindingSource.Current as DataRowView)["CNTMON"].ToString() +
                                 "&isEdit" + "=0";
            if ((qVidgetInMonBindingSource.Current as DataRowView)["PARAMS"].ToString()!="")
                NavigateUrl = NavigateUrl  + (qVidgetInMonBindingSource.Current as DataRowView)["PARAMS"].ToString();
            this.sETUPTableAdapter.Fill(this.qDoctor.SETUP, "CNTMONITOR");
            showmon.webBrowsers.Navigate(NavigateUrl);
            //MessageBox.Show("URL " + NavigateUrl);
            showmon.FormBorderStyle = FormBorderStyle.None;
            showmon.WindowState = FormWindowState.Maximized;
            showmon.Show();
        }

        private void настроитьТекщийВиджетToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Clipboard.SetText((qVidgetInMonBindingSource.Current as DataRowView)["html"].ToString() + (qVidgetInMonBindingSource.Current as DataRowView)["savedlayot"].ToString());
        }

        private Form FindShow()
        {
            for (int i = 0; i < Application.OpenForms.Count; i++)
            {
                if (Application.OpenForms[i].Name.Contains("fShowInMonior"))
                {
                    return Application.OpenForms[i];
                }
            }
            return null;
        }
        private void ClearAllShow_Click(object sender, EventArgs e)
        {
            while (FindShow() != null)
            {
                FindShow().Dispose();
            }

        }

        private void gvWorkPlace_RowDeleted(object sender, DevExpress.Data.RowDeletedEventArgs e)
        {
            this.qRaspTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
            this.wORKPLACESTableAdapter.Update(this.qWorkPlace.WORKPLACES);
            this.wORKPLACESTableAdapter.Fill(this.qWorkPlace.WORKPLACES);
        }

        private void gridView1_RowDeleted(object sender, DevExpress.Data.RowDeletedEventArgs e)
        {
            this.qRaspTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
            this.dOCTORSTableAdapter.Update(this.qDoctor.DOCTORS);
            this.dOCTORSTableAdapter.Fill(this.qDoctor.DOCTORS);

        }

        private void удалитьToolStripMenuItem_Click(object sender, EventArgs e)
        {
            (qVidgetInMonBindingSource.Current as DataRowView).Delete();
            this.adaptVidgetInMon.Update(this.qDoctor.qVidgetInMon);
            this.adaptVidgetInMon.Fill(this.qDoctor.qVidgetInMon, WorkedMonitors.SelectedIndex + 1);
        }

        private void удвлитьToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //(qRaspBindingSource.Current as DataRowView).Delete();
            //qRaspTableAdapter.Update(this.qDoctor.qRasp);
            //this.qRaspTableAdapter.Fill(this.qDoctor.qRasp, Convert.ToInt32(gridLookUpOrg.EditValue));
        }

        private void RefreshTime_ValueChanged(object sender, EventArgs e)
        {
            //this.qDoctor.SETUPREFRESH.Rows[0]["VALUEINT"] = RefreshTime.Value;
            this.sETUPREFRESHTableAdapter.Update(this.qDoctor.SETUPREFRESH);
            //this.sETUPREFRESHTableAdapter.Fill(this.qDoctor.SETUPREFRESH, "REFRESH");
            timerRefresh.Enabled = false;
            if (Convert.ToInt32(RefreshTime.Value * 1000 * 60 * 60) != 0)
            {
                timerRefresh.Interval = Convert.ToInt32(RefreshTime.Value * 1000 * 60 * 60);
                timerRefresh.Enabled = true;
            }

        }

        private void spinMinitors_EditValueChanged(object sender, EventArgs e)
        {
        }

        private void spinMinitors_Leave(object sender, EventArgs e)
        {
            this.qDoctor.SETUP.Rows[0]["VALUEINT"] = Convert.ToInt32(spinMinitors.Value);
            this.sETUPTableAdapter.Update(this.qDoctor.SETUP);
            this.sETUPTableAdapter.Fill(this.qDoctor.SETUP, "CNTMONITOR");
            SetupMonitorList();

        }

        private void RefreshTime_Leave(object sender, EventArgs e)
        {
            this.qDoctor.SETUPREFRESH.Rows[0]["VALUEINT"] = Convert.ToInt32(RefreshTime.Value);
            this.sETUPREFRESHTableAdapter.Update(this.qDoctor.SETUPREFRESH);
            this.sETUPREFRESHTableAdapter.Fill(this.qDoctor.SETUPREFRESH, "REFRESH");

        }

        private void btPaste_Click(object sender, EventArgs e)
        {
            if (qVidgetInMonBindingSource.Current != null)
            {
                if (MessageBox.Show("Вы замените текущее содержание виджета. Это необратимо. Заменить ?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    if (Convert.ToInt32(btPaste.Tag) == 1)
                    {
                        (qVidgetInMonBindingSource.Current as DataRowView)["HTML"] = Clipboard.GetText();
                        qVidgetInMonBindingSource.EndEdit();
                        this.adaptVidgetInMon.Update(this.qDoctor.qVidgetInMon);
                        this.adaptVidgetInMon.Fill(this.qDoctor.qVidgetInMon, WorkedMonitors.SelectedIndex + 1);
                    }
                    else
                    {
                        this.mONITORSTableAdapter.FillByMn(this.qDoctor.MONITORS, Convert.ToInt32((qVidgetInMonBindingSource.Current as DataRowView)["CNTMON"]),
                                                           Convert.ToInt32((qVidgetInMonBindingSource.Current as DataRowView)["IDMON"]));
                        this.qDoctor.MONITORS.Rows[0]["savedlayot"] = Clipboard.GetText();
                        this.mONITORSTableAdapter.Update(this.qDoctor.MONITORS);
                        this.mONITORSTableAdapter.Fill(this.qDoctor.MONITORS);
                    }
                }
            }
        }

        private void menuVidgets_Opening(object sender, CancelEventArgs e)
        {
            if (qVidgetInMonBindingSource.Current != null)
            {
                btPaste.Enabled = Clipboard.ContainsText() && Convert.ToInt32(btPaste.Tag) != 0;
                if ((qVidgetInMonBindingSource.Current as DataRowView)["url"].ToString().ToUpper().Contains("HTML"))
                {
                    btCpopy.Text = "Скопировать Содержимое виджета";
                    if ((Convert.ToInt32(btPaste.Tag) == 0))
                        btPaste.Text = "Вставить Содержимое виджета";
                    btCpopy.Enabled = true;
                }
                else
                {
                    btCpopy.Text = "Скопировать Внешний вид на мониторе";
                    if ((Convert.ToInt32(btPaste.Tag) == 0))
                        btPaste.Text = "Вставить Внешний вид на мониторе";
                    btPaste.Enabled = false;
                    btCpopy.Enabled = false;
                }
                if (Convert.ToInt32(btPaste.Tag) == 1)
                {
                    btPaste.Text = "Вставить Содержимое виджета";
                }
                else
                {
                    btPaste.Text = "Вставить Внешний вид на мониторе";
                    btPaste.Enabled = false;
                }
            }
            else
                btCpopy.Enabled = false;

        }

        private void btCpopy_Click(object sender, EventArgs e)
        {
            if ((qVidgetInMonBindingSource.Current as DataRowView)["html"].ToString().Trim() != "")
            {
                btCpopy.Tag = 1;
                btPaste.Tag = 1;
                Clipboard.SetText((qVidgetInMonBindingSource.Current as DataRowView)["html"].ToString());
            }
            else
            {
                btCpopy.Tag = 2;
                btPaste.Tag = 2;
                Clipboard.SetText((qVidgetInMonBindingSource.Current as DataRowView)["savedlayot"].ToString());
            }
        }

        private void timerRefresh_Tick(object sender, EventArgs e)
        {
            ShowInTv_Click(sender, e);
        }
        private void HideNotWorks()
        {
            var scales = schedulerControls.TimelineView.Scales;
            try
            {
                scales.BeginUpdate();
                scales.Clear();
                scales.Add(new TimeScaleWeek());
                scales.Add(new TimeScaleDay());
                    var customTimeScaleHour = new ScaleTimeLine();
                TimeInterval interval = new TimeInterval();
                interval.Start = Convert.ToDateTime("08:00");
                interval.End = Convert.ToDateTime("17:00");
                customTimeScaleHour.StartEnd = interval;
                //customWorkWeekScale.Width = 125;
                customTimeScaleHour.Width = 125;
                //customTimeScaleMinutes.Width = 125;

                scales.Add(customTimeScaleHour);
            }
            finally
            {
                scales.EndUpdate();
            }
            
        }

        private void schedulerControl1_InitAppointmentDisplayText(object sender, DevExpress.XtraScheduler.AppointmentDisplayTextEventArgs e)
        {
            string text = e.Appointment.Start.ToString("H:mm") + " до " + e.Appointment.End.ToString("H:mm")+ " " + e.Appointment.Description;
            e.Text = text;
            e.Description = text;
        }

        private void schedulerControls_EditAppointmentFormShowing(object sender, AppointmentFormEventArgs e)
        {
            DevExpress.XtraScheduler.SchedulerControl scheduler = ((DevExpress.XtraScheduler.SchedulerControl)(sender));
            pnptv.CustomAppointmentForm form = new pnptv.CustomAppointmentForm(scheduler, e.Appointment, e.OpenRecurrenceForm, ConnectionModules.connectionstring);
            try
            {
                e.DialogResult = form.ShowDialog();
                e.Handled = true;
            }
            finally
            {
                form.Dispose();
            }

        }

        private void schedulerData_AppointmentsChanged(object sender, PersistentObjectsEventArgs e)
        {
            
            qScheduleAdapter.Update(this.dmSchedule.qSchedule);
            this.dmSchedule.qSchedule.AcceptChanges();
            RefreshScheduleData();

        }

        private void schedulerData_AppointmentsDeleted(object sender, PersistentObjectsEventArgs e)
        {
            
            qScheduleAdapter.Update(this.dmSchedule.qSchedule);
            this.dmSchedule.qSchedule.AcceptChanges();
            RefreshScheduleData();
            //schedulerControls.Update();
        }

        private void schedulerData_AppointmentsInserted(object sender, PersistentObjectsEventArgs e)
        {
            
            qScheduleAdapter.Update(this.dmSchedule.qSchedule);
            this.dmSchedule.qSchedule.AcceptChanges();
            RefreshScheduleData();
        }

        private void tabRasp_Enter_1(object sender, EventArgs e)
        {
            
        }

        private void tbRefresh_Click(object sender, EventArgs e)
        {
            
            RefreshScheduleData();
        }



        private void gridView6_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            ((e.Row as DataRowView).Row as dmSchedule.KABINETSPRRow).IDWORKPLACE = Convert.ToInt32(KabinetPlace.EditValue);
            kABINETSPRTableAdapter.Update(this.dmSchedule.KABINETSPR);
            this.kABINETSPRTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
            this.kABINETSPRTableAdapter.Fill(this.dmSchedule.KABINETSPR, Convert.ToInt32(KabinetPlace.EditValue));
        }

        private void gridView6_RowDelete(object sender, DevExpress.Data.RowDeletedEventArgs e)
        {
            kABINETSPRTableAdapter.Update(this.dmSchedule.KABINETSPR);
            this.kABINETSPRTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
            this.kABINETSPRTableAdapter.Fill(this.dmSchedule.KABINETSPR, Convert.ToInt32(KabinetPlace.EditValue));

        }

        private void удалитьToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            (kABINETSPRBindingSource.Current as DataRowView).Delete();
            int idallCurerent = (int)(kABINETSPRBindingSource.Current as DataRowView).Row["IDALL"];
            kABINETSPRTableAdapter.Update(this.dmSchedule.KABINETSPR);
            this.kABINETSPRTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
            this.kABINETSPRTableAdapter.Fill(this.dmSchedule.KABINETSPR, Convert.ToInt32( KabinetPlace.EditValue));
            this.dmSchedule.KABINETSPR.FindByIDALL(idallCurerent);


        }

        private void KabinetPlace_EditValueChanged(object sender, EventArgs e)
        {
            this.kABINETSPRTableAdapter.Connection.ConnectionString = ConnectionModules.connectionstring; ; // _connectionOleDb;
            this.kABINETSPRTableAdapter.Fill(this.dmSchedule.KABINETSPR, Convert.ToInt32(KabinetPlace.EditValue));
        }

        private void schedulerControls_InitNewAppointment(object sender, AppointmentEventArgs e)
        {
            //e.Appointment.CustomFields["IDVRACH"] = 0;
        }

        private void schedulerData_AppointmentDeleting(object sender, PersistentObjectCancelEventArgs e)
        {

        }

        private void AdjustResources()
        {
            //ActiveTimeLineBasedView.ResourcesPerPage = Convert.ToInt32(spinResourcesPerPage.EditValue);

            schedulerControls.TimelineView.ResourcesPerPage = Convert.ToInt32( schedulerControls.Size.Height / 100);
        }

        private void schedulerControls_Resize(object sender, EventArgs e)
        {
            AdjustResources();
        }

        private void DeleteadresCab_Click(object sender, EventArgs e)
        {
            //
            (tPlaceAdressBindingSource.Current as DataRowView).Delete();
            this.qPlaceAdress.Update(this.dmSchedule.tPlaceAdress);
            this.qPlaceAdress.Fill(this.dmSchedule.tPlaceAdress);
        }

        private void gridViewCabAdress_RowDeleted(object sender, DevExpress.Data.RowDeletedEventArgs e)
        {
            this.qPlaceAdress.Update(this.dmSchedule.tPlaceAdress);
            this.qPlaceAdress.Fill(this.dmSchedule.tPlaceAdress);

        }

        private void gridViewCabAdress_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            this.qPlaceAdress.Update(this.dmSchedule.tPlaceAdress);
            this.qPlaceAdress.Fill(this.dmSchedule.tPlaceAdress);
        }

        private void tbFindFreeCab_Click(object sender, EventArgs e)
        {
            fGetFreeResource finds = new fGetFreeResource();
            finds.IdWorkPlace = Convert.ToInt32(WorkPlaceSchedule.EditValue);
            finds.ConnString = ConnectionModules.connectionstring; 
            if (finds.ShowDialog() == DialogResult.OK)
            {
                if (finds.vrachSelect.EditValue.ToString() != "[]")
                {
                    //schedulerControls.DataStorage.Appointments.Clear();
                    //// Select time interval  
                    //schedulerControls.ActiveView.SetSelection(new TimeInterval(DateTime.Now, new TimeSpan(2, 40, 0)), ResourceEmpty.Resource);
                    //// Group by resource.  
                    //schedulerControls.GroupType = SchedulerGroupType.Resource;
                    //// Create a new appointment.  
                    Appointment apt = schedulerControls.DataStorage.CreateAppointment(AppointmentType.Normal);


                    // Set the appointment's resource to the resource which contains  
                    // the currently selected time interval.  
                    if (finds.gridView1.FocusedRowHandle >= 0)
                    {
                        apt.ResourceId = Convert.ToInt32(finds.gridView1.GetRowCellValue(finds.gridView1.FocusedRowHandle, "IDKABINET"));
                        // Set the appointment's time interval to the selected time interval.

                        TimeSpan time = TimeSpan.FromTicks(finds.edtStartTime.Time.Ticks);
                        DateTime Start = finds.edtStartDate.DateTime.AddHours(finds.edtStartTime.Time.Hour).AddMinutes(finds.edtStartTime.Time.Minute);
                        DateTime ends = Start.AddHours((int)finds.TimeBusy.Value);
                        apt.Start = Start;
                        apt.End = ends;

                        apt.Subject = finds.vrachSelect.EditValue.ToString();
                        apt.Description = finds.vrachSelect.Text;
                        apt.Location = finds.vrachSelect.EditValue.ToString();
                        apt.StatusId = (int)finds.vrachSelect.EditValue;


                        // Add the new appointment to the appointment collection.  
                        schedulerControls.DataStorage.Appointments.Add(apt);
                        MessageBox.Show("Успешно", "", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
                else
                    MessageBox.Show("Не указан врач. ", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Stop);
            }
            finds.Dispose();
        }

        public DateTime? CopyFrom { get; set; }
        private void tbCopy_Click(object sender, EventArgs e)
        {
            CopyFrom = schedulerControls.Start;
            schedulerControls_VisibleIntervalChanged(null, null);
        }

        private void schedulerControls_SelectionChanged(object sender, EventArgs e)
        {
        }

        private void schedulerControls_VisibleIntervalChanged(object sender, EventArgs e)
        {
            tbPaste.Enabled = CopyFrom != null && CopyFrom != schedulerControls.Start;
            tbCopuSpecials.Enabled = CopyFrom != null; // && CopyFrom != schedulerControls.Start;

        }

        private void tbPaste_Click(object sender, EventArgs e)
        {
            DateTime dateFrom = (DateTime)CopyFrom;
            
            if (MessageBox.Show("Скопировать расписание с " + dateFrom.ToString("dd.MMMM.yyyy") + " на " + schedulerControls.Start.ToString("dd.MMMM.yyyy") + " ?" + Environment.NewLine + "При этом данные за " +
                                schedulerControls.Start.ToString("dd.MMMM.yyyy") + " будут удалены.", "Подтверждение",MessageBoxButtons.YesNo,MessageBoxIcon.Question)==DialogResult.Yes)
            {
                using (OleDbConnection myCon = new OleDbConnection(ConnectionModules.connectionstring)) 
                {
                    OleDbCommand cmd = new OleDbCommand();
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"delete from cabinet_shedule sc
                                        Where cast(sc.start as date) = @newStart";
                    cmd.Parameters.AddWithValue("@newStart", schedulerControls.Start);
                    cmd.Connection = myCon;
                    myCon.Open();
                    cmd.ExecuteNonQuery();
                    myCon.Close();
                    cmd.Parameters.Clear();
                    cmd.CommandText = @"insert into cabinet_shedule (idkabinet, idvrach, start, ends, idworkplace, Description)
                                        select sc.idkabinet, sc.idvrach,
                                                  cast(@newStart as date) + cast(sc.start as time),
                                                  cast(@newStart as date) + cast(sc.ends as time),
                                                  sc.idworkplace, sc.Description
                                         from cabinet_shedule sc
                                        Where cast(sc.start as date) = @FromDate";
                    cmd.Parameters.AddWithValue("@newStart", schedulerControls.Start);
                    cmd.Parameters.AddWithValue("@FromDate", dateFrom);
                    cmd.Connection = myCon;
                    myCon.Open();
                    cmd.ExecuteNonQuery();
                    RefreshScheduleData();
                }
            
            }
        }

        private void toolStripButton1_Click(object sender, EventArgs e)
        {

        }

        private void tbCopuSpecials_Click(object sender, EventArgs e)
        {
            fCopyScheduler frm = new fCopyScheduler();
            frm.FromDate = CopyFrom;
            frm.ToDate = schedulerControls.Start;
            if (frm.ShowDialog() == DialogResult.OK)
            {
                var Res = MessageBox.Show("Скопировать расписание с " + frm.edtStartDate.Text + " по " + frm.edtEndDate.Text + "\n" +
                                                 "на период с " + frm.dcopyFrom.Text + " по " + frm.dcopyTo.Text + "\n" +
                                                 "ВНИМАНИЕ! Расписние периода назначения будет удалено !", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
               if (Res == DialogResult.Yes)
                {
                    using (OleDbConnection myCon = new OleDbConnection(ConnectionModules.connectionstring))
                    {
                        OleDbCommand cmd = new OleDbCommand();
                        cmd.CommandType = CommandType.Text;
                        cmd.CommandText = @"delete from cabinet_shedule sc
                                            Where cast(sc.start as date) BETWEEN @newStart and @NewEnd";
                        cmd.Parameters.AddWithValue("@newStart", frm.dcopyFrom.DateTime);
                        cmd.Parameters.AddWithValue("@NewEnd", frm.dcopyTo.DateTime);
                        cmd.Connection = myCon;
                        myCon.Open();
                        cmd.ExecuteNonQuery();
                        myCon.Close();
                        DateTime dataEnd = frm.dcopyTo.DateTime;
                        DateTime curentDate = frm.dcopyFrom.DateTime;
                        DateTime CopyFrom = frm.edtStartDate.DateTime;
                        while (curentDate <= dataEnd)
                        {
                            cmd.Parameters.Clear();
                            cmd.CommandText = @"insert into cabinet_shedule (idkabinet, idvrach, start, ends, idworkplace, Description)
                                        select sc.idkabinet, sc.idvrach,
                                                  cast(@curentDate as date) + cast(sc.start as time),
                                                  cast(@curentDate as date) + cast(sc.ends as time),
                                                  sc.idworkplace, sc.Description
                                         from cabinet_shedule sc
                                        Where cast(sc.start as date) BETWEEN @FromDate and @FromDate";
                            cmd.Parameters.AddWithValue("@curentDate", curentDate);
                            cmd.Parameters.AddWithValue("@FromDate", CopyFrom);
                            cmd.Connection = myCon;
                            myCon.Open();
                            cmd.ExecuteNonQuery();
                            myCon.Close();
                            curentDate = curentDate.AddDays(1);
                            CopyFrom = CopyFrom.AddDays(1);
                        }
                        RefreshScheduleData();
                        MessageBox.Show("Расписание скопировано.", "Информация", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }

                }
            }
            frm.Dispose();
        }

        private void tbFind_Click(object sender, EventArgs e)
        {
            fFindReplace frm = new fFindReplace();
            frm.ConnectionString_ = ConnectionModules.connectionstring;
            frm.FromDate = schedulerControls.Start;
            if (frm.ShowDialog() == DialogResult.OK)
            {
                string messageeplace = "";
                messageeplace = "Найти в периоде " + frm.edtStartDate.Text + " по " + frm.edtEndDate.Text + "\n";
                string SetReplace = "";

                if (frm.SourceVrach.Text != frm.TagetVrach.Text && frm.TagetVrach.EditValue != null)
                {
                    messageeplace = messageeplace + "заменить врача " + frm.SourceVrach.Text + " на " + frm.TagetVrach.Text + "\n";
                    SetReplace = "IDVRACH = " + frm.TagetVrach.EditValue.ToString();
                }

                if (frm.SourceVrach.Text != "" && frm.prims.EditValue != null)
                {
                    messageeplace = messageeplace + "Заменить примечание на " + frm.prims.Text;
                    SetReplace = SetReplace != "" ? SetReplace + ", " : "";
                    SetReplace = SetReplace + "Description = '" + frm.prims.Text + "'";
                }
                if (SetReplace == "") return;
                var Res = MessageBox.Show(messageeplace, "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
                    if (SetReplace != "" && Res == DialogResult.Yes)
                    {
                        using (OleDbConnection myCon = new OleDbConnection(ConnectionModules.connectionstring))
                    {
                        OleDbCommand cmd = new OleDbCommand();
                        cmd.CommandType = CommandType.Text;
                        cmd.CommandText = @"update cabinet_shedule sc set " + SetReplace +
                                            " Where cast(sc.start as date) BETWEEN @newStart and @NewEnd and IDVRACH = @IDVRACH";
                        cmd.Parameters.AddWithValue("@newStart", frm.edtStartDate.DateTime);
                        cmd.Parameters.AddWithValue("@NewEnd", frm.edtEndDate.DateTime);
                        cmd.Parameters.AddWithValue("@IDVRACH", frm.SourceVrach.EditValue.ToString());
                        cmd.Connection = myCon;
                        myCon.Open();
                        cmd.ExecuteNonQuery();
                        myCon.Close();
                        RefreshScheduleData();
                        MessageBox.Show("Поиск и замена сделана.", "Информация", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
            }
         }

        private void tsripFind_Click(object sender, EventArgs e)
        {
            tbFind_Click(sender, e);
        }

        private void WorkPlaceSchedule_EditValueChanged(object sender, EventArgs e)
        {
            RefreshScheduleData();

        }
    }
}
